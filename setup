#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Log files
NODE_LOG="nodelog.txt"
PIP_LOG="pypilog.txt"

# Function to print colored messages
pprint() {
    local color="$PURPLE"
    [ ! -z "$2" ] && color="${!2}"
    printf "${color}%s${NC}" "$1"
}

# Function to reset color
color_reset() {
    printf "${NC}"
}

# Function for yes/no prompts
yesnoprompt() {
    local old_stty_cfg=$(stty -g)
    stty raw -echo
    answer=$(head -c 1)
    stty "$old_stty_cfg"
    echo "$answer" | grep -iq "^y"
}

# Update system packages
update_system() {
    pprint "\n\nUpdating package list.. "
    if sudo apt update 2>&1 | grep -q "can be upgraded"; then
        pprint "UPDATE AVAILABLE\n" "GREEN"
        pprint "\nDo you want to automatically upgrade packages (y/n)? "
        if yesnoprompt; then
            pprint "\nUpgrading packages.. "
            if sudo apt upgrade -y &>/dev/null; then
                pprint "SUCCESS!\n\n" "GREEN"
            else
                pprint "FAILED\n\n" "RED"
                exit 1
            fi
        else
            echo
        fi
    else
        pprint "ALREADY UP TO DATE\n\n" "GREEN"
    fi
}

# Check and install required system packages
install_packages() {
    # Install pip if not found
    if ! command -v pip &>/dev/null; then
        pprint "Couldn't find pip, installing now..."
        if sudo apt install python3-pip -y &>>"$PIP_LOG"; then
            pprint "SUCCESS\n\n" "GREEN"
        else
            pprint "FAILED\n\n" "RED"
            exit 1
        fi
    fi

    # Install ffmpeg if not found
    if ! command -v ffmpeg &>/dev/null; then
        pprint "Installing ffmpeg..."
        if sudo apt install ffmpeg -y &>/dev/null; then
            pprint "SUCCESS\n\n" "GREEN"
        else
            pprint "FAILED\n\n" "RED"
            pprint "You need to install ffmpeg manually to deploy BrandrdXMusic\n" "BLUE"
            exit 1
        fi
    fi

    # Check ffmpeg version
    local ffmpeg_version=$(ffmpeg -version | grep -Po 'version (3.*?) ' || echo "")
    if [[ "$ffmpeg_version" =~ 3.* ]]; then
        pprint "Warning: Live streams may not work with ffmpeg $ffmpeg_version (requires v4+)\n" "YELLOW"
    fi
}

# Install Node.js and npm
install_node() {
    if command -v npm &>/dev/null; then
        return
    fi
    
    pprint "Installing Node.js and npm.. "
    if curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - &>>"$NODE_LOG" && \
       sudo apt install -y nodejs &>>"$NODE_LOG" && \
       sudo npm i -g npm &>>"$NODE_LOG"; then
        pprint "SUCCESS!\n" "GREEN"
    else
        pprint "FAILED\n" "RED"
        exit 1
    fi
}

# Install Python dependencies
install_dependencies() {
    pprint "\nUpgrading pip and installing dependencies..."
    if pip3 install -U pip &>>"$PIP_LOG" && \
       pip3 install -U -r requirements.txt &>>"$PIP_LOG"; then
        pprint "SUCCESS!\n" "GREEN"
    else
        pprint "FAILED\n" "RED"
        exit 1
    fi
}

# Get user input for configuration
get_configuration() {
    clear
    pprint "\nEnter Your Configuration Values\n\n" "BLUE"
    
    pprint "API ID: "; color_reset; read -r api_id
    pprint "API HASH: "; color_reset; read -r api_hash
    pprint "BOT TOKEN: "; color_reset; read -r bot_token
    pprint "OWNER ID: "; color_reset; read -r owner_id
    pprint "MONGO DB URI: "; color_reset; read -r mongo_db
    pprint "LOG GROUP ID: "; color_reset; read -r logger_id
    pprint "STRING SESSION: "; color_reset; read -r string_session

    pprint "\nProcessing your configuration..." "GREEN"
    sleep 2
}

# Create .env file
create_env_file() {
    cat > .env << EOF
API_ID=$api_id
API_HASH=$api_hash
BOT_TOKEN=$bot_token
MONGO_DB_URI=$mongo_db
LOGGER_ID=$logger_id
STRING_SESSION=$string_session
OWNER_ID=$owner_id
EOF

    # Secure the .env file
    chmod 600 .env
}

# Main execution
main() {
    clear
    pprint "Welcome to BrandrdXMusic Setup Installer\n\n" "PURPLE"
    pprint "Note: During installation, check these files for logs:\n" "BLUE"
    pprint "  - Node.js errors: $NODE_LOG\n"
    pprint "  - Python package errors: $PIP_LOG\n"
    sleep 2
    
    pprint "\nThis script requires sudo privileges to install packages.\n" "YELLOW"
    sudo -v || (pprint "Error: Sudo access required\n" "RED"; exit 1)

    # Installation steps
    update_system
    install_packages
    install_node
    install_dependencies

    clear
    pprint "\nBrandrdXMusic Installation Completed!\n" "GREEN"
    sleep 1

    get_configuration
    create_env_file

    clear
    pprint "\nConfiguration saved successfully!\n\n" "GREEN"
    pprint "You can start the bot with: bash start\n\n" "BLUE"
    pprint "To edit configuration later: nano .env\n\n" "YELLOW"
}

# Run main function
main
